ModelBuilder Introduction
===========================

ModelBuilder is a platform designed to integrate all processes involved in the
life cycle of numerical simulation. ModelBuilder combines the individual
preprocessing, solver, and post-processing softwares into one application which
allows the user to create or import geometry, generate or import mesh, assign
simulation parameters to the model, generate the simulation input decks for the
solver, as well as view and process the computational results.

Key Concepts
------------

To understand the workflow of ModelBuilder, it is first necessary to clarify
several key concepts -- model, session, mesh, and attribute.

Model
`````
A model refers to the 2D or 3D geometric representation of the simulation
object. In ModelBuilder, a model can be either created or imported. The origins
of a model establish the operations that can be applied. Common operations
include Save, Export, Delete, and Add Auxiliary Geometry.  See :ref:`The Model
Tab <model-tab>` for more details.

Session
```````
ModelBuilder is capable of handling models created by a variety of modeling
kernels, each using a different format to represent their model. The interface
between ModelBuilder and the native kernel that creates the model is called a
session.  For example, the :ref:'vtk session <vtk-session>' uses VTK data
structures so that it can handle models in VTK.

Mesh
````
A mesh is a key component of many of computational methods. It is consist of
vertices, edges, faces, and their connectivities. Unlike a model, a mesh cannot
be generated by ModelBuilder and must be imported. Users can link their own
meshers to ModelBuilder and generate their mesh within ModelBuilder's framework.
Once in ModelBuilder, a mesh can be modified -- e.g., deleted, exported, or
interpolated. See :ref:`The Mesh Tab <mesh-tab>` for details.

Attribute
`````````
Each simulation package (e.g., |albany|, |openfoam|, |dealii|) accepts
different sets of parameters, called an attribute. Attributes consist of child
*items*, i.e., individual parameters. Additionally, there are conditional
parameters which may or may not exist depending on the values of other items.
All the parameters form a tree of items that control the simulation.

Customizing ModelBuilder
-------------------------

Users integrate ModelBuilder into their workflow by providing

1. a JSON or XML description of the parameters accepted by the simulation
(called a *template*), and

2. a Python script (called an *exporter*) that examines how the template has
been filled out and generates an input deck for the simulation.

Users can provide the template using the editor application that comes with CMB.
However, users more often utilize a pre-existing template and exporter. Some
of templates and exporters come with ModelBuilder, while others may be provided
by other organizations. Refer to |smtk-attribute| for details. Once the template
is completed, ModelBuilder is used to import or create a model, fill out the
template, associate the model with a mesh, submit these inputs to run, and
review results. <possibly reword or reference workflow below>

Workflow
---------
The workflow using ModelBuilder can be summarized in the following steps:

1. Model: Create or import a geometry model into  ModelBuilder.  Then the model can be modified with further operations, such as grouping and coloring entities.

2. Mesh: Generate or import a mesh, as described above.

3. Attributes: Assign simulation parameters to the model and export as follows:

 a. Load the simulation template as discussed above and define the simulation
    parameters through the ModelBuilder GUI.

 b. Associate the parameters to the geometry regions in the model.
    For example, when modeling groundwater flow, different sediment layers must
    be defined then associated to the geometric portion of the earth being
    simulated.

 c. Export the input decks for the solver.
    Once the simulation parameters have been specified and associated to the
    geometry, ModelBuilder can be used to export an input deck for submission to
    a simulation.

4. Simulation: Run your simulation locally or remotely. ModelBuilder supports both managed and unmanaged execution of your simulation.

5. Post-Processing: Load the simulation results into ModelBuilder for post-processing and comparative analysis with the input model.

.. |albany| raw:: html

   <a href="https://github.com/SNLComputation/Albany" target="_blank"> Albany </a>

.. |openfoam| raw:: html

   <a href="http://openfoam.org/" target="_blank"> Open FOAM </a>

.. |dealii| raw:: html

   <a href="http://www.dealii.org/" target="_blank"> deal.ii </a>

.. |smtk-attribute| raw:: html

   <a href="http://smtk.readthedocs.io/en/latest/userguide/attribute/index.html"
   target="_blank"> SMTK's attribute resource documentation </a>
